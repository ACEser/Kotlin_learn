用于实现后台功能的Service属于四大组件之一，其重要程度不言而喻，那么我们自然要好好学习一下它的用法了。

10.1　Service是什么
Service是Android中实现程序后台运行的解决方案，它非常适合执行那些不需要和用户交互而且还要求长期运行的任务

Service并不是运行在一个独立的进程当中的，而是依赖于创建Service时所在的应用程序进程。
当某个应用程序进程被杀掉时，所有依赖于该进程的Service也会停止运行。

另外，也不要被Service的后台概念所迷惑，实际上Service并不会自动开启线程，所有的代码都是默认运行在主线程当中的。
也就是说，我们需要在Service的内部手动创建子线程，并在这里执行具体的任务，否则就有可能出现主线程被阻塞的情况

10.2　Android多线程编程

10.2.1　线程的基本用法
Android多线程编程其实并不比Java多线程编程特殊，基本是使用相同的语法
比如，定义一个线程只需要新建一个类继承自Thread，然后重写父类的run()方法，并在里面编写耗时逻辑即可，如下所示：
class MyThread : Thread() {
    override fun run() {
        // 编写具体的逻辑
    }
}

那么该如何启动这个线程呢？其实很简单，只需要创建MyThread的实例，然后调用它的start()方法即可
MyThread().start()
这样run()方法中的代码就会在子线程当中运行了

当然，使用继承的方式耦合性有点高，我们会更多地选择使用实现Runnable接口的方式来定义一个线程
class MyThread : Runnable {
    override fun run() {
        // 编写具体的逻辑
    }
}

如果使用了这种写法，启动线程的方法也需要进行相应的改变，如下所示：
val myThread = MyThread()
Thread(myThread).start()

可以看到，Thread的构造函数接收一个Runnable参数，而我们创建的MyThread实例正是一个实现了Runnable接口的对象，
所以可以直接将它传入Thread的构造函数里。
接着调用Thread的start()方法，run()方法中的代码就会在子线程当中运行了。

当然，如果你不想专门再定义一个类去实现Runnable接口，也可以使用Lambda的方式，这种写法更为常见，如下所示：
Thread {
    // 编写具体的逻辑
}.start()

而Kotlin还给我们提供了一种更加简单的开启线程的方式，写法如下：
thread {
    // 编写具体的逻辑
}
这里的thread是一个Kotlin内置的顶层函数，
我们只需要在Lambda表达式中编写具体的逻辑就可以了，连start()方法都不用调用，thread函数在内部帮我们全部都处理好了。

下面我们来看一下Android多线程编程与Java多线程编程不同的地方。

10.2.2　在子线程中更新UI
和许多其他的GUI库一样，Android的UI也是线程不安全的。
也就是说，如果想要更新应用程序里的UI元素，必须在主线程中进行，否则就会出现异常。


Android提供了一套异步消息处理机制，完美地解决了在子线程中进行UI操作的问题。我们将在下一小节中再去分析它的原理。
修改MainActivity中的代码，如下所示：
class MainActivity : AppCompatActivity() {

    val updateText = 1

    val handler = object : Handler(Looper.getMaininLooper()) {
        override fun handleMessage(msg: Message) {
            // 在这里可以进行UI操作
            when (msg.what) {
                updateText -> textView.text = "Nice to meet you"
            }
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        changeTextBtn.setOnClickListener {
            thread {
                val msg = Message()
                msg.what = updateText
                handler.sendMessage(msg) // 将Message对象发送出去
            }
        }
    }

}
这里我们先是定义了一个整型变量updateText，用于表示更新TextView这个动作。
然后新增一个Handler对象，并重写父类的handleMessage()方法，在这里对具体的Message进行处理

可以看到，这次我们并没有在子线程里直接进行UI操作，而是创建了一个Message（android.os.Message）对象，
并将它的what字段的值指定为updateText，然后调用Handler的sendMessage()方法将这条Message发送出去。
很快，Handler就会收到这条Message，并在handleMessage()方法中对它进行处理
注意此时handleMessage()方法中的代码就是在主线程当中运行的了，所以我们可以放心地在这里进行UI操作。

下面我们就来分析一下Android异步消息处理机制到底是如何工作的。

10.2.3　解析异步消息处理机制
Android中的异步消息处理主要由4个部分组成：Message、Handler、MessageQueue和Looper
其中Message和Handler在上一小节中我们已经接触过了，而MessageQueue和Looper对于你来说还是全新的概念，下面我就对这4个部分进行一下简要的介绍。

Message
Message是在线程之间传递的消息，它可以在内部携带少量的信息，用于在不同线程之间传递数据。
上一小节中我们使用到了Message的what字段，除此之外还可以使用arg1和arg2字段来携带一些整型数据，使用obj字段携带一个Object对象。

Handler
Handler顾名思义也就是处理者的意思，它主要是用于发送和处理消息的

MessageQueue
MessageQueue是消息队列的意思，它主要用于存放所有通过Handler发送的消息

Looper
Looper是每个线程中的MessageQueue的管家，调用Looper的loop()方法后，就会进入一个无限循环当中，
然后每当发现MessageQueue中存在一条消息时，就会将它取出，
并传递到Handler的handleMessage()方法中。每个线程中只会有一个Looper对象。

了解了Message、Handler、MessageQueue以及Looper的基本概念后，我们再来把异步消息处理的整个流程梳理一遍。
首先需要在主线程当中创建一个Handler对象，并重写handleMessage()方法。
然后当子线程中需要进行UI操作时，就创建一个Message对象，并通过Handler将这条消息发送出去。
之后这条消息会被添加到MessageQueue的队列中等待被处理，
而Looper则会一直尝试从MessageQueue中取出待处理消息，最后分发回Handler的handleMessage()方法中。
由于Handler的构造函数中我们传入了Looper.getMainLooper()，
所以此时handleMessage()方法中的代码也会在主线程中运行，
于是我们在这里就可以安心地进行UI操作了

10.2.4　使用AsyncTask
首先来看一下AsyncTask的基本用法。由于AsyncTask是一个抽象类，
所以如果我们想使用它，就必须创建一个子类去继承它。
在继承时我们可以为AsyncTask类指定3个泛型参数，这3个参数的用途如下。

● Params。在执行AsyncTask时需要传入的参数，可用于在后台任务中使用。
● Progress。在后台任务执行时，如果需要在界面上显示当前的进度，则使用这里指定的泛型作为进度单位。
● Result。当任务执行完毕后，如果需要对结果进行返回，则使用这里指定的泛型作为返回值类型。
因此，一个最简单的自定义AsyncTask就可以写成如下形式：
class DownloadTask : AsyncTask<Unit, Int, Boolean>() {
    ...
}
这里我们把AsyncTask的第一个泛型参数指定为Unit，表示在执行AsyncTask的时候不需要传入参数给后台任务。
第二个泛型参数指定为Int，表示使用整型数据来作为进度显示单位。
第三个泛型参数指定为Boolean，则表示使用布尔型数据来反馈执行结果。

当然，目前我们自定义的DownloadTask还是一个空任务，并不能进行任何实际的操作，
我们还需要重写AsyncTask中的几个方法才能完成对任务的定制。经常需要重写的方法有以下4个。

onPreExecute()
这个方法会在后台任务开始执行之前调用，用于进行一些界面上的初始化操作

doInBackground(Params...)
这个方法会在后台任务开始执行之前调用，用于进行一些界面上的初始化操作

doInBackground(Params...)
这个方法中的所有代码都会在子线程中运行，我们应该在这里去处理所有的耗时任务。
任务一旦完成，就可以通过return语句将任务的执行结果返回，
如果AsyncTask的第三个泛型参数指定的是Unit，就可以不返回任务执行结果

onProgressUpdate(Progress...)
当在后台任务中调用了publishProgress(Progress...)方法后，
onProgressUpdate (Progress...)方法就会很快被调用，
该方法中携带的参数就是在后台任务中传递过来的。
在这个方法中可以对UI进行操作，
利用参数中的数值就可以对界面元素进行相应的更新。


因此，一个比较完整的自定义AsyncTask就可以写成如下形式：
class DownloadTask : AsyncTask<Unit, Int, Boolean>() {

    override fun onPreExecute() {
        progressDialog.show() // 显示进度对话框
    }

    override fun doInBackground(vararg params: Unit?) = try {
        while (true) {
            val downloadPercent = doDownload() // 这是一个虚构的方法
            publishProgress(downloadPercent)
            if (downloadPercent >= 100) {
                break
            }
        }
        true
    } catch (e: Exception) {
        false
    }

这里进行UI操作
    override fun onProgressUpdate(vararg values: Int?) {
        // 在这里更新下载进度
        progressDialog.setMessage("Downloaded ${values[0]}%")
    }

    override fun onPostExecute(result: Boolean) {
        progressDialog.dismiss()// 关闭进度对话框
        // 在这里提示下载结果
        if (result) {
            Toast.makeText(context, "Download succeeded", Toast.LENGTH_SHORT).show()
        } else {
            Toast.makeText(context, " Download failed", Toast.LENGTH_SHORT).show()
        }
    }

}

在这个DownloadTask中，我们在doInBackground()方法里执行具体的下载任务。这个方法里的代码都是在子线程中运行的，因而不会影响主线程的运行
注意，这里虚构了一个doDownload()方法，用于计算当前的下载进度并返回，我们假设这个方法已经存在了。
在得到了当前的下载进度后，下面就该考虑如何把它显示到界面上了，由于doInBackground()方法是在子线程中运行的，
在这里肯定不能进行UI操作，所以我们可以调用publishProgress()方法并传入当前的下载进度，
这样onProgressUpdate()方法就会很快被调用，在这里就可以进行UI操作了。

简单来说，使用AsyncTask的诀窍就是，在doInBackground()方法中执行具体的耗时任务，
在onProgressUpdate()方法中进行UI操作，在onPostExecute()方法中执行一些任务的收尾工作。

以上就是AsyncTask的基本用法，怎么样，是不是感觉简单方便了许多？
我们并不需要去考虑什么异步消息处理机制，
也不需要专门使用一个Handler来发送和接收消息，
只需要调用一下publishProgress()方法，就可以轻松地从子线程切换到UI线程了。

10.3　Service的基本用法
10.3.1　定义一个Service

class MyService : Service() {

    override fun onBind(intent: Intent): IBinder {
        TODO("Return the communication channel to the service.")
    }

}

MyService是继承自系统的Service类的。目前MyService中可以算是空空如也，但有一个onBind()方法特别醒目。
这个方法是Service中唯一的抽象方法，所以必须在子类里实现。我们会在后面的小节中使用到onBind()方法，目前可以暂时将它忽略。

既然是定义一个Service，自然应该在Service中处理一些事情了，那处理事情的逻辑应该写在哪里呢？这时就可以重写Service中的另外一些方法了，如下所示：
class MyService : Service() {
    ...
    override fun onCreate() {
        super.onCreate()
    }

    override fun onStartCommand(intent: Intent, flags: Int, startId: Int): Int {
        return super.onStartCommand(intent, flags, startId)
    }

    override fun onDestroy() {
        super.onDestroy()
    }

}
可以看到，这里我们又重写了onCreate()、onStartCommand()和onDestroy()这3个方法，它们是每个Service中最常用到的3个方法了。
其中onCreate()方法会在Service创建的时候调用，onStartCommand()方法会在每次Service启动的时候调用，onDestroy()方法会在Service销毁的时候调用。

通常情况下，如果我们希望Service一旦启动就立刻去执行某个动作，就可以将逻辑写在onStartCommand()方法里。
而当Service销毁时，我们又应该在onDestroy()方法中回收那些不再使用的资源。

10.3.2　启动和停止Service
启动和停止的方法当然你也不会陌生，主要是借助Intent来实现的
class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        startServiceBtn.setOnClickListener {
            val intent = Intent(this, MyService::class.java)
            startService(intent) // 启动Service
        }
        stopServiceBtn.setOnClickListener {
            val intent = Intent(this, MyService::class.java)
            stopService(intent) // 停止Service
        }
    }

}
tartService()和stopService()方法都是定义在Context类中的，
所以我们在Activity里可以直接调用这两个方法。
另外，Service也可以自我停止运行，只需要在Service内部调用stopSelf()方法即可。


10.3.3　Activity和Service进行通信
在上一小节中，我们学习了启动和停止Service的方法。不知道你有没有发现，
虽然Service是在Activity里启动的，但是在启动了Service之后，Activity与Service基本就没有什么关系了

那么可不可以让Activity和Service的关系更紧密一些呢？例如在Activity中指挥Service去干什么，Service就去干什么。
当然可以，这就需要借助我们刚刚忽略的onBind()方法了。

比如说，目前我们希望在MyService里提供一个下载功能，
然后在Activity中可以决定何时开始下载，以及随时查看下载进度。
实现这个功能的思路是创建一个专门的Binder对象来对下载功能进行管理
class MyService : Service() {

    private val mBinder = DownloadBinder()

    class DownloadBinder : Binder() {

        fun startDownload() {
            Log.d("MyService", "startDownload executed")
        }

        fun getProgress(): Int {
            Log.d("MyService", "getProgress executed")
            return 0
        }

    }

    override fun onBind(intent: Intent): IBinder {
        return mBinder
    }
    ...
}

当一个Activity和Service绑定了之后，就可以调用该Service里的Binder提供的方法了
class MainActivity : AppCompatActivity() {

    lateinit var downloadBinder: MyService.DownloadBinder

    private val connection = object : ServiceConnection {

        override fun onServiceConnected(name: ComponentName, service: IBinder) {
这行代码的作用是将 service 对象从 IBinder 类型转换为 MyService.DownloadBinder 类型。
service 是 onServiceConnected 方法中的参数，
这个参数是当 Android 系统成功绑定到服务时传递给客户端的一个接口（IBinder）。
通过将 IBinder 强制转换为更具体的 MyService.DownloadBinder 类型，你可以调用这个类中定义的这些方法。
            downloadBinder = service as MyService.DownloadBinder
            downloadBinder.startDownload()
            downloadBinder.getProgress()
        }

        override fun onServiceDisconnected(name: ComponentName) {
        }

    }

    override fun onCreate(savedInstanceState: Bundle?) {
        ...
        bindServiceBtn.setOnClickListener {
            val intent = Intent(this, MyService::class.java)
            bindService(intent, connection, Context.BIND_AUTO_CREATE) // 绑定Service
        }
        unbindServiceBtn.setOnClickListener {
            unbindService(connection) // 解绑Service
        }
    }

}

在onServiceConnected()方法中，
我们又通过向下转型得到了DownloadBinder的实例，有了这个实例，Activity和Service之间的关系就变得非常紧密了。
现在我们可以在Activity中根据具体的场景来调用DownloadBinder中的任何public方法，
即实现了指挥Service干什么Service就去干什么的功能

现在Activity和Service其实还没进行绑定呢，这个功能是在“Bind Service”按钮的点击事件里完成的
bindService()方法接收3个参数，第一个参数就是刚刚构建出的Intent对象，
第二个参数是前面创建出的ServiceConnection的实例，
第三个参数则是一个标志位，这里传入BIND_AUTO_CREATE表示在Activity和Service进行绑定后自动创建Service。
这会使得MyService中的onCreate()方法得到执行，但onStartCommand()方法不会执行。

如果我们想解除Activity和Service之间的绑定该怎么办呢？调用一下unbindService()方法就可以了

10.4　Service的生命周期
Service也有自己的生命周期，前面我们使用到的onCreate()、onStartCommand()、onBind()和onDestroy()等方法都是在Service的生命周期内可能回调的方法。
一旦在项目的任何位置调用了Context的startService()方法，相应的Service就会启动，并回调onStartCommand()方法

如果这个Service之前还没有创建过，onCreate()方法会先于onStartCommand()方法执行

Service启动了之后会一直保持运行状态，直到stopService()或stopSelf()方法被调用，或者被系统回收。
注意，虽然每调用一次startService()方法，onStartCommand()就会执行一次，但实际上每个Service只会存在一个实例

另外，还可以调用Context的bindService()来获取一个Service的持久连接，这时就会回调Service中的onBind()方法
类似地，如果这个Service之前还没有创建过，onCreate()方法会先于onBind()方法执行

当调用了startService()方法后，再去调用stopService()方法。这时Service中的onDestroy()方法就会执行，表示Service已经销毁了
但是需要注意，我们是完全有可能对一个Service既调用了startService()方法，又调用了bindService()方法的，在这种情况下该如何让Service销毁呢？
根据Android系统的机制，一个Service只要被启动或者被绑定了之后，就会处于运行状态，
必须要让以上两种条件同时不满足，Service才能被销毁。
所以，这种情况下要同时调用stopService()和unbindService()方法，onDestroy()方法才会执行。

10.5　Service的更多技巧
10.5.1　使用前台Service
而如果你希望Service能够一直保持运行状态，就可以考虑使用前台Service。
前台Service和普通Service最大的区别就在于，
它一直会有一个正在运行的图标在系统的状态栏显示，下拉状态栏后可以看到更加详细的信息，非常类似于通知的效果

由于状态栏中一直有一个正在运行的图标，相当于我们的应用以另外一种形式保持在前台可见状态，所以系统不会倾向于回收前台Service
另外，用户也可以通过下拉状态栏清楚地知道当前什么应用正在运行，因此也不存在某些恶意应用长期在后台偷偷占用手机资源的情况。

那么我们就来看一下如何才能创建一个前台Service吧
class MyService : Service() {
    ...
    override fun onCreate() {
        super.onCreate()
        Log.d("MyService", "onCreate executed")
        val manager = getSystemService(Context.NOTIFICATION_SERVICE) as
                NotificationManager
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel("my_service", "前台Service通知",
                    NotificationManager.IMPORTANCE_DEFAULT)
            manager.createNotificationChannel(channel)
        }
        val intent = Intent(this, MainActivity::class.java)
        val pi = PendingIntent.getActivity(this, 0, intent, 0)
        val notification = NotificationCompat.Builder(this, "my_service")
            .setContentTitle("This is content title")
            .setContentText("This is content text")
            .setSmallIcon(R.drawable.small_icon)
            .setLargeIcon(BitmapFactory.decodeResource(resources, R.drawable.large_icon))
            .setContentIntent(pi)
            .build()
        startForeground(1, notification)
    }
    ...
}

这次在构建Notification对象后并没有使用NotificationManager将通知显示出来，而是调用了startForeground()方法。
这个方法接收两个参数：第一个参数是通知的id，类似于notify()方法的第一个参数；第二个参数则是构建的Notification对象。
调用startForeground()方法后就会让MyService变成一个前台Service，并在系统状态栏显示出来。

10.5.2　使用IntentService
需要用到Android多线程编程的技术了，
我们应该在Service的每个具体的方法里开启一个子线程，然后在这里处理那些耗时的逻辑

class MyService : Service() {
    ...
    override fun onStartCommand(intent: Intent, flags: Int, startId: Int): Int {
        thread {
            // 处理具体的逻辑
        }
        return super.onStartCommand(intent, flags, startId)
    }
}
但是，这种Service一旦启动，就会一直处于运行状态，
必须调用stopService()或stopSelf()方法，
或者被系统回收，Service才会停止。
所以，如果想要实现让一个Service在执行完毕后自动停止的功能，就可以这样写：
class MyService : Service() {
    ...
    override fun onStartCommand(intent: Intent, flags: Int, startId: Int): Int {
        thread {
            // 处理具体的逻辑
            stopSelf()
        }
        return super.onStartCommand(intent, flags, startId)
    }
}

为了可以简单地创建一个异步的、会自动停止的Service，Android专门提供了一个IntentService类，
这个类就很好地解决了前面所提到的两种尴尬，下面我们就来看一下它的用法。

class MyIntentService : IntentService("MyIntentService") {

    override fun onHandleIntent(intent: Intent?) {
        // 打印当前线程的id
        Log.d("MyIntentService", "Thread id is ${Thread.currentThread().name}")
    }

    override fun onDestroy() {
        super.onDestroy()
        Log.d("MyIntentService", "onDestroy executed")
    }

}
然后要在子类中实现onHandleIntent()这个抽象方法，
这个方法中可以处理一些耗时的逻辑，而不用担心ANR的问题，因为这个方法已经是在子线程中运行的了
也就是你不用管这个进程的原因


10.6　 Kotlin课堂：泛型的高级特性
10.6.1　对泛型进行实化
那么具体该怎么写才能将泛型实化呢？
首先，该函数必须是内联函数才行，也就是要用inline关键字来修饰该函数。
其次，在声明泛型的地方必须加上reified关键字来表示该泛型要进行实化。

上述函数中的泛型T就是一个被实化的泛型，
因为它满足了内联函数和reified关键字这两个前提条件。那么借助泛型实化，到底可以实现什么样的效果呢？
inline fun <reified T> getGenericType() = T::class.java

虽然只有一行代码，但是这里却实现了一个Java中完全不可能实现的功能：
getGenericType()函数直接返回了当前指定泛型的实际类型。
T.class这样的语法在Java中是不合法的，
而在Kotlin中，借助泛型实化功能就可以使用T::class.java这样的语法了。

10.6.2　泛型实化的应用
泛型实化功能允许我们在泛型函数当中获得泛型的实际类型，
这也就使得类似于a is T、T::class.java这样的语法成为了可能

有没有觉得TestActivity::class.java这样的语法很难受呢？
当然，如果在没有更好选择的情况下，这种写法也是可以忍受的，但是Kotlin的泛型实化功能使得我们拥有了更好的选择。

新建一个reified.kt文件，然后在里面编写如下代码：
inline fun <reified T> startActivity(context: Context) {
    val intent = Intent(context, T::class.java)
    context.startActivity(intent)
}

接下来就是神奇的地方了，Intent接收的第二个参数本来应该是一个具体Activity的Class类型，
但由于现在T已经是一个被实化的泛型了，
因此这里我们可以直接传入T::class.java。最后调用Context的startActivity()方法来完成Activity的启动

现在，如果我们想要启动TestActivity，只需要这样写就可以了：
startActivity<TestActivity>(context)
Kotlin将能够识别出指定泛型的实际类型，并启动相应的Activity。
怎么样，是不是觉得代码瞬间精简了好多？这就是泛型实化所带来的神奇功能

因为通常在启用Activity的时候还可能会使用Intent附带一些参数
而经过刚才的封装之后，我们就无法进行传参了。

这个问题也不难解决，只需要借助之前在第6章学习的高阶函数就可以轻松搞定。
回到reified.kt文件当中，这里添加一个新的startActivity()函数重载
inline fun <reified T> startActivity(context: Context, block: Intent.() -> Unit) {
    val intent = Intent(context, T::class.java)
    intent.block()
    context.startActivity(intent)
}

可以看到，这次的startActivity()函数中增加了一个函数类型参数，并且它的函数类型是定义在Intent类当中的
在创建完Intent的实例之后，随即调用该函数类型参数，并把Intent的实例传入，
这样调用startActivity()函数的时候就可以在Lambda表达式中为Intent传递参数了

startActivity<TestActivity>(context) {
    putExtra("param1", "data")
    putExtra("param2", 123)
}

不得不说，这种启动Activity的代码写起来实在是太舒服了，
泛型实化和高阶函数使这种语法结构成为了可能，感谢Kotlin提供了如此多优秀的语言特性。
