class setflod(var name:String, var score:Double){
    fun do2(){println("$name is $score")}
}
//注意引用对象这里也要加一个问号
fun print(setflog:setflod?){
    setflog?.let{
        setflog.do2()
    }
}
fun main2() {
    val kotlin = "🙂"
    println(kotlin)
    //复习一下let，是给对象之间用的，代码逻辑是 obj.let { obj2 -> 编写具体的业务逻辑 }
    //主要的作用就是结合？不用重复判空,单个函数好像不需要判空，
    //因为直接不传不通过，所以肯定要有完整的参数才给通过，所以多用在函数相互调用之间
    val set1 : setflod = setflod("fdsjk",32432.4)
    print(set1)
}

//接下来是with函数的使用，比如下面这段代码
fun main3(){
    var list =listOf("apple","banana","orange","pear","grape")
    var builder = StringBuilder()
    builder.append("start eating fruit.\n")
    for(fruit in list){
        builder.append(fruit).append("\n")
    }
    builder.append("all fruit ate")
    val result = builder.toString()
    println(result)
    //with函数会在Lambda表达式中提供第一个参数对象的上下文，
	//并使用Lambda表达式中的最后一行代码作为返回值返回，
	//所以上面的代码可以简写成下面这样
    val result2 = with(StringBuilder()){
        append("start eat fruit\n")
        for(fruit in list){
            append(fruit).append("\n")
        }
        append("end")
        toString()
    }
	println(result2)
    //再接下来就是run函数的使用，这个和with差不多，
    //不过他是被对象调用，所以不传入对象。直接跟一个lambda表达式
    val result3 = StringBuilder().run{
        append("start eat fruit again\n")
        for(fruit in list){
            append(fruit).append("\n")
        }
        append("end again")
        toString()
    }
    //但是上面这个会显示result3没有安全检查。所以有什么方式检查呢？
    //可以这样改
    val result4 = StringBuilder().run{
        append("start eat fruit again\n")
        for(fruit in list){
            append(fruit).append("\n")
        }
        append("end again")
        toString()
    }.let{
        if(it.isNotEmpty()){
            println("string is empty")
        }
        else {
            println("fdjkaf")
        }
    }
    //apply基本和run一致，只是没办法设定返回值，返回对象本身
    val list2 = listOf("Apple", "Banana", "Orange", "Pear", "Grape")
	val result5 = StringBuilder().apply {
    	append("Start eating fruits.\n")
    	for (fruit in list2) {
        	append(fruit).append("\n")
    }
    	append("Ate all fruits.")
	}
	println(result5.toString())

}

//Kotlin使用了单例类来大部分替换了java中的静态方法
//（添加static后不需要创建实例就可以调用的方法），
//不过想要在Kotlin中创建真正的静态方法，可以加上@JvmStatic
class Util {
    fun doAction1(){
        println("do")
    }
    companion object{
        fun doAction2(){
            println("do 2")
        }
    }
}
fun main(){
    //调用下单例类
    Util.doAction2()
}

关于如何知晓活动的Activity：
一个简单的的Kotlin类
open class BaseActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        Log.d("BaseActivity", javaClass.simpleName)
    }

}

接下来我们需要让BaseActivity成为ActivityTest项目中所有Activity的父类，
为了使BaseActivity可以被继承，我已经提前在类名的前面加上了open关键字。 
然后修改FirstActivity、SecondActivity和ThirdActivity的继承结构，让它们不再继承自AppCompatActivity，而是继承自BaseActivity。 
而由于BaseActivity又是继承自AppCompatActivity的，所以项目中所有Activity的现有功能并不受影响，它们仍然继承了Activity中的所有特性。 

3.6.2　随时随地退出程序
其实解决思路也很简单，只需要用一个专门的集合对所有的Activity进行管理就可以了。下面我们就来实现一下
新建一个单例类ActivityCollector作为Activity的集合，代码如下所示

object ActivityCollector {

    private val activities = ArrayList<Activity>()

    fun addActivity(activity: Activity) {
        activities.add(activity)
    }

    fun removeActivity(activity: Activity) {
        activities.remove(activity)
    }

    fun finishAll（） {
        for (activity in activities) {
            if (!activity.isFinishing) {
                activity.finish()
            }
        }
        活动.clear（）
    }

}

接下来修改BaseActivity中的代码
open class BaseActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        Log.d("BaseActivity", javaClass.simpleName)
        ActivityCollector.addActivity(this)
    }

    override fun onDestroy() {
        super.onDestroy（） 中
        ActivityCollector.removeActivity(this)
    }

}

这里使用了单例类，是因为全局只需要一个Activity集合
注意在销毁Activity之前，我们需要先调用activity.isFinishing来判断Activity是否正在销毁中，
因为Activity还可能通过按下Back键等方式被销毁，
如果该Activity没有正在销毁中，我们再去调用它的finish()方法来销毁它。
从此以后，不管你想在什么地方退出程序，只需要调用ActivityCollector.finishAll()方法就可以了


3.6.3　启动Activity的最佳写法
将参数暴露出来减少沟通成本和看代码的成本
分工时可能一个人负责一个Activity，如果是按照下面这样：
val intent = Intent(this, SecondActivity::class.java)
intent.putExtra("param1", "data1")
intent.putExtra（“参数2”， “数据2”）
startActivity(intent)

下一个接任者只能看代码或者问你才知道调用的参数
更好的写法是静态方法
class SecondActivity : BaseActivity() {
    ...
    companion object {
        fun actionStart(context: Context, data1: String, data2: String) {
            val intent = Intent(context, SecondActivity::class.java)
            intent.putExtra("param1", data1)
            intent.putExtra("param2", data2)
            context.startActivity(intent)
        }
    }
}
使用一个静态方法Companion Object 将启动的代码打包成一个函数，暴露出需要传入的参数
这样就不必因为不知道参数导致对接有困难
调用其他人写的Activity只需要这样做
button1.setOnClickListener {
    SecondActivity.actionStart（this， “数据1”， “数据2”）
}

高阶函数

with用法：
val result = with(obj) {
    // 这里是obj的上下文
    "value" // with函数的返回值
}


比如下面这段代码：
val list = listOf("Apple", "Banana", "Orange", "Pear", "Grape")
val result = with(StringBuilder()) {
    append("Start eating fruits.\n")
    for (fruit in list) {
        append(fruit).append("\n")
    }
    append("Ate all fruits.")
    toString()
}
println(result)

首先我们给with函数的第一个参数传入了一个StringBuilder对象，
那么接下来整个Lambda表达式的上下文就会是这个StringBuilder对象。（原来上下文这个意思）
于是我们在Lambda表达式中就不用再像刚才那样调用builder.append()和builder.toString()方法了，而是可以直接调用append()和toString()方法。
Lambda表达式的最后一行代码会作为with函数的返回值返回，最终我们将结果打印出来。

首先run函数通常不会直接调用，而是要在某个对象的基础上调用；
其次run函数只接收一个Lambda参数，并且会在Lambda表达式中提供调用对象的上下文
其他方面和with函数是一样的，包括也会使用Lambda表达式中的最后一行代码作为返回值返回
val result = obj.run {
    // 这里是obj的上下文
    "value" // run函数的返回值
}

使用run实现和with相同的功能：
val list = listOf("Apple", "Banana", "Orange", "Pear", "Grape")
val result = StringBuilder().run {
    append("Start eating fruits.\n")
    for (fruit in list) {
        append(fruit).append("\n")
    }
    append("Ate all fruits.")
    toString()
}
println(result)

其实没有什么很大的区别
总体来说变化非常小，只是将调用with函数并传入StringBuilder对象改成了调用StringBuilder对象的run方法，其他都没有任何区别，
这两段代码最终的执行结果是完全相同的。

最后我们再来学习标准函数中的apply函数。apply函数和run函数也是极其类似的，都要在某个对象上调用，并且只接收一个Lambda参数，
也会在Lambda表达式中提供调用对象的上下文，但是apply函数无法指定返回值，而是会自动返回调用对象本身
val result = obj.apply {
     // 这里是obj的上下文
}
结果 == OBJ

val list = listOf("Apple", "Banana", "Orange", "Pear", "Grape")
val result = StringBuilder().apply {
    append("Start eating fruits.\n")
    for (fruit in list) {
        append(fruit).append("\n")
    }
    append("Ate all fruits.")
}
println（result.toString（））

这时候调用的是返回后的StringBuilder对象的tostring 方法

回想一下刚刚在最佳实践环节编写的启动Activity的代码：
val intent = Intent(context, SecondActivity::class.java)
intent.putExtra("param1", "data1")
intent.putExtra("param2", "data2")
context.startActivity（意图）

显然这里的intent对象可以使用高阶函数进行简化
val intent = Intent(context, SecondActivity::class.java).apply {
    putExtra("param1", "data1")
    putExtra("param2", "data2")
}
context.startActivity（意图）


静态方法与单例类
Kotlin提供了比静态方法更好用的语法特性，并且我们在上一节中已经学习过了，那就是单例类。
将class替换为Object
object Util {

    fun doAction() {
        println("do action")
    }

}
如果我们不想让整个类里面的函数都变成静态方法，可以使用companion Object
class Util {

    fun doAction1() {
        println("do action1")
    }

    companion object {

        fun doAction2() {
            println("do action2")
        }

    }

}
doAction2()方法可以直接使用Util.doAction2()的方式调用。 

而如果我们给单例类或companion object中的方法加上@JvmStatic注解，那么Kotlin编译器就会将这些方法编译成真正的静态方法
如果是在Kotlin代码中调用的话，那就很简单了，所有的顶层方法都可以在任何位置被直接调用，不用管包名路径，
也不用创建实例，直接键入doSomething()即可
class Util {

    fun doAction1() {
        println("do action1")
    }

    companion object {

        @JvmStatic
        fun doAction2() {
            println("do action2")
        }

    }

}
